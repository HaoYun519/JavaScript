================================ JavaScript ES6 與 React 前端開發 =================================================================================================================
let 變數名稱;
let x;   //宣告變數 x
let y=3; // 宣告變數 y 的同時，指定資料

const 常數名稱=常數資料;
// 宣告常數PI, 一定要指定資料
const PI=3.1415926;

================================ 詳解 let、const、var 的差異 ===========================================================

var v=3;

v="Hello World"; // 變數中的資料可變動

let l; // 宣告變數，可以暫時不給資料
l=0; // 變數中的資料可變動

const X; // 錯誤：常數宣告時，一定要給資料

const c=100; // 正確，宣告常數，同時給定資料
C=50; // 錯誤：不能更動常數中的資料

================================ 箭頭函式 Arrow Function =======================================================================

1. (參數列表)=>(回傳值)

    // 傳統的函式宣告
    let add=Function(n1, n2){
        return n1+n2;
    };
            ▼  (省略 Function)

    // 箭頭函式的寫法一
    let add=(n1, n2)=>(n1+n2);

2.(參數列表)=>{函式內部程式}

    // 傳統的函式宣告
    let add=Function(n1, n2){
        return n1+n2;
    };
            ▼
            
    // 箭頭函式的寫法二
    let add=(n1, n2)=>{
        return n1+n2;
    };

3.匿名函式

    // 在排程中使用「傳統的方式」撰寫「匿名函式」
    setTimeout(function(){
        console.log("過了一秒鐘");
    }, 1000);
                ▼

    // 在排程中使用「箭頭函式」撰寫「匿名函式」
    setTimeout(()=>{
        console.log("過了一秒鐘");
    }, 1000);

================================ 如何指定函式參數的預設值 =======================================================================

1.(舊方法)：

    function show(message){
        if(typeof message==="undefined"){ // 未給定 message 資料
            message="預設值";
        }
        alert(message);
    }
    show("Hello"); // 顯示:Hello
    show(); // 顯示:預設值

2.(新方法)ES6：(name=預設值1,name2=預設值)

    function show(message="預設值"){
        alert(message);
    } 
    show("Hello"); // 顯示:Hello
    show(); // 顯示:預設值

3.箭頭函式：

    let show=(message="預設值")=>{
        alert(message);
    };
    show("Hello"); // 顯示:Hello
    show(); // 顯示:預設值

4.範例一：

    function multiply(n1, n2=1){
        return n1*n2;
    }
    multiply(3, 4); // 回傳 12
    multiply(5); // 回傳 5

5.範例一(箭頭函式)：

    let multiply=(n1, n2=1)=>(n1*n2);
    multiply(3, 4); // 回傳 12
    multiply(5); // 回傳 5

6.範例二：後面的參數可使用前面的參數名稱
    function combine(first="Jedi", last="Wang", name=first+" "+last){
        alert(name);
    }
    combine("Helen", "Li"); // 顯示:Helen Li
    combine("Helen"); // 顯示:Helen Wang
    combine(); // 顯示:Jedi Wang

================================ 類別與物件的基本觀念 =======================================================================

基本類別設計會用到的關鍵字： class, constructor

產生物件實體會用到的關鍵字： new

定義類別： class 類別名稱{}

建立物件： new 類別名稱()

// 定義一個類別
    class Car{}
// 利用已經定義好的類別, 產生新物件
// new Car() 產生新物件, 並放進變數 car1 中
    let car1=new Car();
// new Car() 產生新物件, 並放進變數 car2 中
    let car2=new Car();

================================= 定義建構式 Constructor =======================================================================

在類別中定義建構式
    constructor(參數列表){
        建構式的內部程式
    }

    // 定義一個類別
    class Car{}
        // 在類別中, 定義建構式
        constructor(){
            console.log("建構式被呼叫");
        }
    }
    // 利用已經定義好的類別, 產生新物件
    let car1=new Car(); // new Car() 呼叫建構式, 產生新物件
    let car2=new Car(); // new Car() 呼叫建構式, 產生新物件

若是沒特別寫, 內建空白建構式：constructor(){}

================================= 定義、存取屬性 Attribute =======================================================================

屬性:用來描述物件的個別差異

在建構式中建立屬性
    constructor(參數列表){
        this.屬性名稱=初始資料;
    }

1.
    // 定義一個類別
    class Car{
        constructor(){
            this.color="red"; // 建立新屬性 color, 指定資料 "red"
        }
    }
    // 利用已經定義好的類別, 產生新物件
    let car1=new Car(); // 新物件擁有 color 屬性, 資料為 "red"
    let car2=new Car(); // 新物件擁有 color 屬性, 資料為 "red"

2.
    // 定義一個類別
    class Car{
        constructor(color){
            this.color=color; // 建立新屬性 color, 資料透過參數, 彈性的, 在建立物件時提供
        }
    }
    // 利用已經定義好的類別, 產生新物件
    let car1=new Car("blue"); // 新物件擁有 color 屬性, 資料為 "blue"
    let car2=new Car("green"); // 新物件擁有 color 屬性, 資料為 "green"

存取物件屬性:
    物件.屬性名稱
    物件.屬性名稱=新的資料

3.
    // 定義一個類別
    class Car{
        constructor(color){
            this.color=color; // 建立新屬性 color, 資料透過參數, 彈性的, 在建立物件時提供
        }
    }
    // 利用已經定義好的類別, 產生新物件
    let car1=new Car("blue"); // 新物件擁有 color 屬性, 資料為 "blue"
    console.log(car1.color); // 取得屬性資料, 印出"blue"
    car1.color="red"; // 更新屬性資料
    console.log(car1.color) // 取得新的屬性資料, 印出 "red"

================================= 定義、呼叫方法 Method ===========================================================================

方法:用來描述物件可以做的事，(或)與物件綁定的函式

在類別中建立方法
    方法的名稱(參數列表){
        內部的程式碼
    }

呼叫物件方法
    物件.方法名稱(參數列表)

在物件方法中使用 this 代表綁定物件

範例(1):
    // 定義一個類別
    class Car{
        constructor(color){this.color=color;}// 定義建構式
        // 定義一個 run 方法, 透過物件呼叫, 並執行內部程式碼
        run(){
            console.log("Car "+ this.color +" Running");
        }
    }
    // 產生新物件, 物件擁有 color 屬性, 與 run方法
    let car1=new Car("blue");
    car1.run(); // 呼叫 run 方法, 執行 run 內部的程式, 印出 "Car blue Running"


範例(2):
// 物件屬性, 方法的綜合操作
    class Car{ // 定義一個類別
        constructor(color){
            this.color=color;
            this.speed=0; // 車子的初始速度固定為 0
        }
        run(speed){
            this.speed=speed; // 更新車子的速度
                console.log("Car "+this.color+" Running at "+this.speed+" KM/HR");
        }
        stop(){
            this.speed=0; // 更新車子的速度
            console.log("Car " +this.color+ " Stopped");
        }
    }
    // 產生新物件, 物件擁有 color, speed 屬性, 與 run, stop 方法
    let car1=new Car("blue");
    car1.run(50); // 印出 "Car blue Running at 50 KM/HR"
    car1.stop(); //  印出 "Car blue Stopped"

================================= 類別繼承的基本觀念 ===========================================================================

類別繼承會用到的關鍵字：extends, super

================================= 定義子類別並操作子類別物件 ===========================================================================

定義子類別
    class 子類別名稱 extends 父類別名稱{}

建立子類別物件
    new 子類別名稱()

定義子類別建構式
    constructor(){
    // 一定要先呼叫父類別建構式
        super();
    // 子類別建構式中的其他程式
    }

================================= 原型鍊 Prototype Chain ===========================================================================

取得原型物件
    Object.getPrototypeOf(物件)

// 定義一個類別
    class Car{
        constructor(color){this.color=color;}
        run(){}
    }
    // 產生類別物件
    let car=new Car("green");
    // 取得並將原型物件顯示出來
    let carProto=Object.getPrototypeOf(car); // Car 原型物件
    console.log(carProto);
    let objProto=Object.getPrototypeOf(carProto); // Object 原型物件
    console.log(objProto);
    let lastOne=Object.getPrototypeOf(objProto); // 原型鍊的終點:ull
    console.log(lastOne);

// 定義一個類別
    class Car{
        constructor(color){this.color=color;}
        run(){}
    }
    // 定義子類別
    class ElectricCar extends Car{
        constructor(color){super(color); this.battery=100;}
        run(distance){}
        charge(){}
    }
    // 產生子類別物件
    let car=new ElectricCar("green");
    car.run(50); // 這個如何運作?

// 在物件實體上直接建立方法或屬性
    // 定義一個類別
    class Car{
        constructor(color){this.color=color;}
        run(){}
    }
    // 定義子類別
    class ElectricCar extends Car{
        constructor(color){super(color); this.battery=100;}
        run(distance){}
        charge(){}
    }
    // 產生子類別物件
    let car=new ElectricCar("green");
    // 在物件實體上直接建立方法或屬性
    car.name="彭彭的車";
    car.test=function(){
        console.log("建立物件後, 在物件實體上新增方法");
        console.log(this.name); // 印出 我的車
    };
    car.test();

===================================== 定義、呼叫靜態方法 Static ==========================================================

在類別中, 定義靜態方法
    static 方法的名稱(參數列表){
        內部的程式碼
    }

呼叫靜態方法
    類別名稱.方法名稱(參數資料)

範例一：
class Car{
    constructor(color){this.color=color;}
    run(){console.log("Car "+this.color+" Running");}
    static showColors(){ // 定義一個靜態方法
        console.log("We support three colors: blue, red, green. ");
    }
}
// 直接使用類別名稱, 呼叫靜態方法
Car.showColors();
Car.run(); // 錯誤的程式, run 非靜態方法, 必須由物件實體呼叫
// 產生新物件實體
let carObj=new Car("blue");
carObj.run(); // 使用物件實體, 呼叫物件的方法 run();
carObj.showColors(); // 錯誤的程式, showColors 為靜態方法, 必須由類別名稱呼叫

===================================== 非同步程式 ==========================================================

非同步：程式中【包含子程式】時產生
 
例如：時間排程
    // 主程式設定排程後, 交由【背景子程式】負責監控時間
    window.setTimeout(function(){ // 此為回呼函式
        alert("兩秒後執行"); // 兩秒後, 【背景子程式】喚醒【主程式】, 執行此函式
    }, 2000);
    // 主程式設定排成後, 立刻往下執行
    alert("立刻被呼叫");
    // 主程式結束,暫時沒事做

例如：Ajax 連線 (利用JavaScript連線後端)
    // Ajax 預設是一個【非同步的程式】
    let req=new XMLHttpRequest();
    req.open("get", "data.txt");
    req.onload=function(){
        // 連線完成後, 【背景子程式】觸發【主程式】的 load 事件處理函式
        alert(this.responseText); // 取得伺服器回應
    };
    // 主程式送出連線後, 交由【背景子程式】負責處理連線細節
    req.send();
    // 主程式送出連線, 立刻往下執行
    alert("立刻被呼叫");
    // 主程式結束, 暫時沒事做

使用回呼函式串接非同步流程
    function getData(callback){
        //2. 準備做 Ajax 連線
        let req=new XMLHttpRequest();
        req.open("get", "data.txt");
        req.onload=function(){
            // 5. 等待一段時間後, 【子程式】完成連線, 觸發【主程式】的 load 事件, 取得資料
            // 6. 呼叫 callback, 即透過參數傳入的 showData 函式
            callback(this.responseText);
        };
        req.send(); // 3. 送出連線, 建立【子程式】進行非同步處理
        // 4.【主程式】立刻結束函式, 回傳 undefined
    }
    function showData(result){
        alert(result); // 7. 可以從 result, 取得連線後得到的資料
    };
    getData(showData); // 1. 呼叫取資料用的函式, 並將 showData 函式透過參數傳入

========================================= Promise 物件串接 =============================================================================

使用 Promise 物件串接非同步流程
    new Promise(執行函式(成功程序, 失敗程序));

使用 then() 方法接續工作
    then(
        函式(){ 成功時的動作 },
        函式(){ 失敗時的動作 }
    )

使用catch() 方法接續失敗處理
    catch(
        函式(){ 失敗時的動作 }
    )

範例:
    function getData(){
        return new Promise(function(resolve, reject){
            let req=new XMLHttpRequest(); req.open("get", "data.txt");
            req.onload=function(){
                // 如何將連線後得到的資料 this.responseText, 串接到主流程上
                    resolve(this.responseText);
                };
                req.send();
            });
    }
    // 這是主流程
    let dataPromise=getData(); // 嘗試從網路取得資料, 回傳 Promise 物件
    dataPromise.then(function(result){
        console.log(result);   // 這裡可以從參數 result, 正確取得連線後得到的資料 
    });

範例(加入失敗函式):
    function getData(){
        return new Promise(function(resolve, reject){
            let req=new XMLHttpRequest(); 
            req.open("get", "url.txt");
            req.onload=function(){resolve(this.responseText);};
            req.onerror=function(){
                reject("Error"); // 失敗時, 做出失敗報告
            };
                req.send();
            });
    }
    // 這是主流程
    getData().then(function(result){console.log(result);}, function(erroe){
        // 這裡可以從參數 error, 取得失敗報告
        console.log(error); 
    });

Promise 类有 .then() .catch() 和 .finally() 三个方法，
这三个方法的参数都是一个函数，.then() 可以将参数中的函数添加到当前 Promise 的正常执行序列，
.catch() 则是设定 Promise 的异常处理序列，
.finally() 是在 Promise 执行的最后一定会执行的序列。 
.then() 传入的函数会按顺序依次执行，有任何异常都会直接跳到 catch 序列：

实例
    new Promise(function (resolve, reject) {
        console.log(1111);
        resolve(2222);
    }).then(function (value) {
        console.log(value);
        return 3333;
    }).then(function (value) {
        console.log(value);
        throw "An error";
    }).catch(function (err) {
        console.log(err);
    });